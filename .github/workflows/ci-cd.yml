name: CI/CD Pipeline for Python Flask App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check if VERSION file exists
        id: check_version
        run: |
          if [ ! -f VERSION ]; then
            echo "VERSION file not found! Creating a new one with version 1.0.0"
            echo "1.0.0" > VERSION
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Read version from file
        id: read_version
        run: |
          VERSION=$(cat VERSION)
          echo "Current version: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Increment version
        id: increment_version
        run: |
          VERSION="${{ steps.read_version.outputs.version }}"
          IFS='.' read -r major minor patch <<< "$VERSION"
          patch=$((patch + 1)) # Increment the patch version
          NEW_VERSION="$major.$minor.$patch"
          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > VERSION
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Build and push Docker image
        run: |
          docker build -t sri24devops/python-docker-app:${{ steps.increment_version.outputs.new_version }} .
          docker push sri24devops/python-docker-app:${{ steps.increment_version.outputs.new_version }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster python-flask-cluster --service flask-service --force-new-deployment